#!/usr/bin/env python

import argparse
import os
import subprocess
import json
import pipes
import shlex
import textwrap

try:
    from jinja2 import Environment
except ImportError:
    print('ERROR: Configuration requires the jinja2 Python package to be installed.')
    sys.exit(1)

project_root = os.path.dirname(os.path.abspath(__file__))
os.chdir(project_root)


def generate_cmakelists(variables):
    contents = textwrap.dedent('''\
        ##########################################
        # GENERATED BY CONFIGURE. DO NOT MODIFY! #
        ##########################################
    ''')

    with open(os.path.join(project_root, 'CMakeLists.txt.jinja'), 'r') as f:
        contents += f.read()

    env = Environment()
    template = env.from_string(contents)
    contents = template.render(**variables)
    with open(os.path.join(project_root, 'CMakeLists.txt'), 'w') as f:
        f.write(contents)


def pkgconfig_cflags(pkg):
    return subprocess.check_output(['pkg-config', pkg, '--cflags']).decode().strip()


def pkgconfig_libs(pkg):
    return subprocess.check_output(['pkg-config', pkg, '--libs', '--static']).decode().strip()


configuration = {}
config_file = 'configure.json'
if os.path.exists(config_file):
    print('Reading configuration from {}'.format(config_file))
    with open(config_file, 'r') as configure_json:
        configuration = json.loads(configure_json.read())

os.environ.update(configuration.get('env', {}))

generate_cmakelists({
    'ldflags': ' '.join([pkgconfig_libs(p) for p in configuration['dependencies']]),
    'cflags': ' '.join([pkgconfig_cflags(p) for p in configuration['dependencies']]),
})

print('Configuration complete. You may now build via `cmake .`')
