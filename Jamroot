project scraps ;

path-constant NEEDS_PATH : needs ;

rule clang-defaults ( properties * ) {
    local result ;
    if <toolset>darwin in $(properties) {
        result += <cflags>-Wbool-conversion ;
        result += <cflags>-Wconditional-uninitialized ;
        result += <cflags>-Wconstant-conversion ;
        result += <cflags>-Wduplicate-method-match ;
        result += <cflags>-Wenum-conversion ;
        result += <cflags>-Wint-conversion ;
        result += <cflags>-fdiagnostics-show-note-include-stack ;
        result += <cflags>-fmacro-backtrace-limit=0 ;
        result += <cflags>-Werror=deprecated-objc-isa-usage ;
        result += <cflags>-Werror=objc-root-class ;
        result += <cflags>-Wno-missing-prototypes ;
        result += <cflags>-Wno-selector ;
        result += <cflags>-Wno-strict-selector-match ;
        result += <cflags>-Wprotocol ;
        result += <cflags>-Wundeclared-selector ;
    }
    if <toolset>darwin in $(properties) || <toolset>clang in $(properties) {
        result += <cflags>-fmessage-length=0 ;
        result += <cflags>-fstrict-aliasing ;
        result += <cflags>-Wdeprecated-declarations ;
        result += <cflags>-Wempty-body ;
        result += <cflags>-Werror=return-type ;
        result += <cflags>-Winvalid-offsetof ;
        result += <cflags>-Wno-arc-repeated-use-of-weak ;
        result += <cflags>-Wno-c++11-extensions ;
        result += <cflags>-Wno-c++1y-extensions ;
        result += <cflags>-Wno-conversion ;
        result += <cflags>-Wno-deprecated-declarations ;
        result += <cflags>-Wno-deprecated-implementations ;
        result += <cflags>-Wno-exit-time-destructors ;
        result += <cflags>-Wno-four-char-constants ;
        result += <cflags>-Wno-implicit-atomic-properties ;
        result += <cflags>-Wno-missing-braces ;
        result += <cflags>-Wno-missing-field-initializers ;
        result += <cflags>-Wno-newline-eof ;
        result += <cflags>-Wno-non-virtual-dtor ;
        result += <cflags>-Wno-overloaded-virtual ;
        result += <cflags>-Wno-receiver-is-weak ;
        result += <cflags>-Wno-shadow ;
        result += <cflags>-Wno-sign-conversion ;
        result += <cflags>-Wno-unknown-pragmas ;
        result += <cflags>-Wno-unused-label ;
        result += <cflags>-Wno-unused-local-typedef ;
        result += <cflags>-Wno-unused-parameter ;
        result += <cflags>-Wparentheses ;
        result += <cflags>-Wswitch ;
        result += <cflags>-Wunreachable-code ;
        result += <cflags>-Wunused-function ;
        result += <cflags>-Wunused-value ;
        result += <cflags>-Wunused-variable ;
    }
    return $(result) ;
}

alias project_defaults : : : :
    <conditional>@clang-defaults

    <toolset>gcc:<cflags>-Wno-error=format
    <toolset>gcc:<cflags>-Wno-error=unused-variable
    <toolset>gcc:<cflags>-Wno-unused-variable
    <toolset>gcc:<cflags>-Wno-format
    <toolset>gcc:<cflags>-Wno-unused-local-typedefs
    <toolset>gcc:<cflags>-Wno-sign-compare

    <define>STATICLIB
;

alias objc : : : :
    <target-os>darwin:<cxxflags>"-x objective-c++"
    <target-os>iphone:<cxxflags>"-x objective-c++"
    <target-os>appletv:<cxxflags>"-x objective-c++"
    <target-os>darwin:<cflags>-fobjc-arc
    <target-os>iphone:<cflags>-fobjc-arc
    <target-os>appletv:<cflags>-fobjc-arc
;

local PKG_CONFIG_PATH = [ modules.peek project-config : PKG_CONFIG_PATH ] ;
local PKG_CONFIG_DEPENDENCIES = [ modules.peek project-config : PKG_CONFIG_DEPENDENCIES ] ;
local OWNED_DEPENDENCIES = [ modules.peek project-config : OWNED_DEPENDENCIES ] ;

rule dep ( name : packages * ) {
    if ! $(packages) {
        packages = $(name) ;
    }
    if $(packages) in $(PKG_CONFIG_DEPENDENCIES) {
        local cflags = [ SHELL "PKG_CONFIG_PATH=$(PKG_CONFIG_PATH) pkg-config $(packages:J= ) --cflags | tr -d '\n'" ] ;
        local ldflags = [ SHELL "PKG_CONFIG_PATH=$(PKG_CONFIG_PATH) pkg-config $(packages:J= ) --libs --static | tr -d '\n'" ] ;
        alias $(name) : : : : <cflags>$(cflags) <linkflags>$(ldflags) ;
    }
    if $(packages) in $(OWNED_DEPENDENCIES) {
        alias install-$(name)-if-owned : $(NEEDS_PATH)//install-$(name) ;
    } else {
        alias install-$(name)-if-owned ;
    }
    explicit install-$(name)-if-owned ;
}

dep openssl : libssl libcrypto ;
dep curl : libcurl ;
dep fmtlib ;
dep libsodium ;
dep gsl ;
dep asio ;
dep mnmlstc ;

lib GLESv2 : : <link>shared ;
lib z : : <link>shared ;
lib dl : : <link>shared ;
lib pthread : : <link>shared ;

alias scraps_deps :
    openssl
    curl
    fmtlib
    libsodium
    gsl
    asio
    mnmlstc
    project_defaults
    objc
: : :
    <include>include
    <cxxflags>"-std=c++1y -fvisibility=hidden"
    <define>ASIO_STANDALONE=1

    <target-os>darwin:<framework>Foundation
    <target-os>darwin:<framework>CoreServices
    <target-os>darwin:<framework>CoreFoundation
    <target-os>darwin:<framework>Security

    <target-os>darwin:<framework>OpenGL
    <target-os>iphone:<framework>OpenGLES
    <target-os>appletv:<framework>OpenGLES
;

lib scraps :
    [ glob-tree-ex src : *.cpp ]
    scraps_deps
    mnmlstc
    z
:
    <link>static
    <target-os>android:<source>GLESv2
    <target-os>linux:<source>pthread
    <target-os>linux:<source>dl
;

import package ;

package.install install-lib : <install-source-root>include : : scraps : [ glob-tree-ex include : *.h ] ;

path-constant PREFIX : [ option.get prefix : "/usr/local" ] ;
path-constant LIB : [ option.get libdir : $(PREFIX)/lib ] ;
path-constant PKG_CONFIG : $(LIB)/pkgconfig ;

make scraps.pc : Jamroot : @pkgconfig ;
rule pkgconfig ( targets * : sources * : properties * ) {
    if <toolset>darwin in $(properties) {
        PRIVATE_LIBS on $(targets) = -framework Foundation ;
    }
}
actions pkgconfig {
cat > $(<) <<- EOM
prefix=\${pcfiledir}/../..
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${exec_prefix}/include

Name: scraps
Version: 0
Description: Random scraps of C++
Requires: libcurl, openssl, fmt, asio, gsl, libsodium, mnmlstc
Libs: -L\${libdir} -lscraps
Libs.private: $(PRIVATE_LIBS)
Cflags: -I\${includedir} -DASIO_STANDALONE=1 -fvisibility=hidden
EOM
}

install install-pkgconfig : scraps.pc : <location>$(PKG_CONFIG) ;

alias install :
    install-lib
    install-pkgconfig
    install-openssl-if-owned
    install-curl-if-owned
    install-fmtlib-if-owned
    install-libsodium-if-owned
    install-gsl-if-owned
    install-asio-if-owned
    install-mnmlstc-if-owned
;

explicit install install-lib install-pkgconfig ;
