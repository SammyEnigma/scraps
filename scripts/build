#!/usr/bin/env python

import argparse
import subprocess
import sys
import os
import multiprocessing
import platform
import distutils.spawn
import pipes

from colorama import Fore, Style


def run_command(command):
    if isinstance(command, list):
        print(Fore.CYAN + Style.BRIGHT + '+ {}'.format(' '.join([pipes.quote(s) for s in command])) + Style.RESET_ALL)
        subprocess.check_call(command)
    else:
        print(Fore.CYAN + Style.BRIGHT + '+ {}'.format(command) + Style.RESET_ALL)
        subprocess.check_call(command, shell=True)

project_root = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')
os.chdir(project_root)

parser = argparse.ArgumentParser(description='Convenience script to build everything on a few select platforms.')
parser.add_argument('-t', '--target',
                    default='',
                    dest='cross_target',
                    choices=['iphoneos', 'appletvos', 'android'],
                    help='cross-compilation target')
parser.add_argument('--variant',
                    default='release',
                    choices=['release', 'debug'],
                    help='variant to build')
parser.add_argument('-c', '--clean',
                    action='store_true',
                    help='clean prior to building')
args = parser.parse_args()

needy_target_args = '--target={}'.format({
    'iphoneos': 'ios',
    'appletvos': 'tvos',
    'android': 'android',
}.get(args.cross_target, None))

build_deps = [
    './build-deps',
    '--configure',
]

if args.clean:
    build_deps.append('--clean')

if args.cross_target:
    build_deps.append('--needy-target-args={}'.format(needy_target_args))

if args.cross_target == 'android':
    if 'ANDROID_TOOLCHAIN' not in os.environ:
        print('ANDROID_TOOLCHAIN not defined')
        sys.exit(1)
    build_deps.append('--needy-satisfy-args=--android-toolchain={}'.format(os.environ['ANDROID_TOOLCHAIN']))

try:
    run_command(build_deps)
    run_command('rm -rf build && mkdir -p build')
    run_command('cd build && cmake ..')
    run_command('cd build && make')
except subprocess.CalledProcessError:
    sys.exit(1)
    pass
